# Development environment
FROM node:18-alpine

# Do not use 'COPY . .' to copy all files. Copying all files will force a build even if no client files have been modified

# Set app directory
WORKDIR /app

# Environment variables
ENV NODE_OPTIONS=--max_old_space_size=4096

# Install system dependencies that might be needed for native modules
RUN apk add --no-cache python3 make g++

# Install
COPY package.json ./
COPY package-lock.json* ./
COPY sync-package-lock ./

# Make sync script executable and run it with error handling
RUN chmod +x ./sync-package-lock || true
RUN ./sync-package-lock || echo "sync-package-lock script failed, continuing with existing package-lock.json"

# Clear cache and install dependencies
RUN npm cache clean --force
# If package-lock.json is not found in previous step, it will be created in the following npm install
RUN npm install

# Build
COPY nodemon.json ./
COPY tsconfig.json ./
COPY src ./src
# RUN npm run build

# Migrations
COPY database ./
# Run migrations. This is also responsible of copying node_modules and package-lock.json to host machine.
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

ENTRYPOINT [ "/docker-entrypoint.sh" ]

# CMD is not executed when command is defined in docker compose
CMD [ "npm", "run", "serve" ]